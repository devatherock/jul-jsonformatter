package io.github.devatherock.json.formatter.helpers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import io.github.devatherock.json.formatter.testhelpers.TestUtil;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Unit test for {@code JSONFormatter} with custom keys
 *
 * @author Devaprasadh Xavier
 */
public class CustomKeysTest {
    private static final PrintStream OLD_STREAM = System.err;
    private static final ByteArrayOutputStream OUTPUT_STREAM = new ByteArrayOutputStream();
    private static final StringBuilder PREVIOUS_LOG_LINES = new StringBuilder();
    private static final TypeReference<Map<String, Object>> TYPE_REF_MAP_STRING_OBJ = new TypeReference<Map<String, Object>>() {
    };

    static {
        TestUtil.loadLoggingConfig("logging-custom-keys.properties");
    }

    @AfterClass
    public static void tearDown() {
        System.setErr(OLD_STREAM);
    }

    @BeforeClass
    public static void captureConsole() {
        System.setErr(new PrintStream(OUTPUT_STREAM));
    }

    /**
     * Tests logging a message with custom keys
     *
     * @throws IOException
     * @throws JsonMappingException
     * @throws JsonParseException
     */
    @Test
    public void testMessageWithCustomKeys()
            throws JsonParseException, JsonMappingException, IOException {
        List<String> logLevels = Arrays.asList("INFO", "WARNING", "SEVERE");
        List<String> outputLevels = Arrays.asList("INFO", "WARN", "ERROR");

        for (int index = 0; index < logLevels.size(); index++) {
            Logger logger = Logger.getLogger(JacksonFormatterTest.class.getName());
            Exception exception = new RuntimeException("test exception");

            String message = "Test message with exception";
            logger.log(Level.parse(logLevels.get(index)), message, exception);

            String logLine = OUTPUT_STREAM.toString("UTF-8");
            String actualLogLine = logLine.replace(PREVIOUS_LOG_LINES.toString(), "");
            Map<String, Object> jsonMap = new ObjectMapper().readValue(actualLogLine, TYPE_REF_MAP_STRING_OBJ);
            verifyJson(jsonMap, logger.getName(), message, outputLevels.get(index));
            TestUtil.verifyExceptionWithMessage("thrown", exception, jsonMap);

            PREVIOUS_LOG_LINES.append(actualLogLine);
        }
    }

    /**
     * Verifies the JSON generated by a simple log line without exception stack
     * traces
     *
     * @param jsonMap
     * @param loggerName
     * @param message
     * @param logLevel
     */
    private void verifyJson(Map<String, Object> jsonMap, String loggerName, String message, String logLevel) {
        assertNotNull(jsonMap.get("eventTime"));
        assertTrue(TestUtil.TIMESTAMP_PATTERN.matcher(jsonMap.get("eventTime").toString()).matches());
        assertEquals(loggerName, jsonMap.get("loggerName"));
        assertEquals(logLevel, jsonMap.get("logLevel"));
        assertNotNull(jsonMap.get("threadName"));
        assertEquals(message, jsonMap.get("log"));
    }
}
