task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

javadoc.failOnError = false
artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name (project.ext.has('licenseType') ? project['licenseType'] : 'MIT License')
            url (project.ext.has('licenseUrl') ? project['licenseUrl'] : 'https://mit-license.org/')
        }
    }

    developers {
        developer {
            id 'devatherock'
            name 'Devaprasadh Xavier'
            email 'devatherock@gmail.com'
        }
    }

    scm {
        url project['scmUrl']
    }
}

project.afterEvaluate {
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourcesJar {
					classifier "sources"
				}
				artifact javadocJar {
					classifier "javadoc"
				}
				groupId "${project.group}"
				artifactId "${project.name}"
				version "${project.version}"
				pom.withXml {
					def root = asNode()
					root.appendNode('description', project.description)
					root.appendNode('name', project.name)
					root.appendNode('url', project['scmUrl'])
					root.children().last() + pomConfig
				}
			}
		}
	}
    
    signing {
        String signingKeyId = System.env.SONATYPE_GPG_SIGNING_KEY_ID
        String signingKey = System.env.SONATYPE_GPG_SIGNING_KEY?.replace('\\n', '\n')
        String signingPassword = System.env.SONATYPE_GPG_SIGNING_PASSWORD
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        
        sign publishing.publications.mavenJava
    }
    
    publishToSonatype.dependsOn build
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.env.SONATYPE_USERNAME
            password = System.env.SONATYPE_PASSWORD
        }
    }
}
