tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events 'passed', 'skipped', 'failed'
    }
}

/** Jacoco report task for custom test tasks **/
task combinedJacocoReport(type: JacocoReport) {
    dependsOn tasks.withType(Test)
    sourceSets sourceSets.main
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    finalizedBy(jacocoTestCoverageVerification)

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml") // Required for coveralls and sonar
        html.destination file("${buildDir}/reports/jacoco")
    }
}

ext.jacoco = [
    coverageThresholds: [
        'io.github.devatherock.json.formatter.JSONFormatter': [
            'BRANCH': 0.81,
            'COMPLEXITY': 0.74,
            'INSTRUCTION': 0.96,
            'LINE': 0.94
        ],
        'io.github.devatherock.json.formatter.JSONFormatter.1': [
            'BRANCH': 0.49,
            'COMPLEXITY': 0.66,
            'INSTRUCTION': 0.81
        ],
        'io.github.devatherock.json.formatter.helpers.JacksonJsonConverter': [
            'INSTRUCTION': 0.82,
            'LINE': 0.59
        ],
    ]
]

jacocoTestCoverageVerification {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    violationRules {
        rule {
            element = 'CLASS'

            // Exclude classes with custom coverage rules
            if(project.ext.has('jacoco') && project['jacoco'].coverageThresholds) {
                excludes = project['jacoco'].coverageThresholds.keySet() as List
            }

            limit {
                counter = 'BRANCH'
                minimum = 1.00
            }
            limit {
                counter = 'COMPLEXITY'
                minimum = 1.00
            }
            limit {
                counter = 'INSTRUCTION'
                minimum = 1.00
            }
            limit {
                counter = 'LINE'
                minimum = 1.00
            }
        }

        // Custom coverage rules
        if(project.ext.has('jacoco') && project['jacoco'].coverageThresholds) {
            project['jacoco'].coverageThresholds.each { className, thresholds ->
                rule {
                    element = 'CLASS'
                    includes = [
                        className
                    ]
                    limit {
                        counter = 'BRANCH'
                        minimum = thresholds['BRANCH'] ?: 1.00
                    }
                    limit {
                        counter = 'COMPLEXITY'
                        minimum = thresholds['COMPLEXITY'] ?: 1.00
                    }
                    limit {
                        counter = 'INSTRUCTION'
                        minimum = thresholds['INSTRUCTION'] ?: 1.00
                    }
                    limit {
                        counter = 'LINE'
                        minimum = thresholds['LINE'] ?: 1.00
                    }
                }
            }
        }
    }
}

/** SonarQube config **/
sonarqube {
    properties {
        property 'sonar.jacoco.reportPaths', 'build/jacoco/customJsonTest.exec,build/jacoco/gsonTest.exec,build/jacoco/jacksonTest.exec,build/jacoco/jsonSimpleTest.exec'
        property 'sonar.junit.reportPaths', 'build/test-results/customJsonTest,build/test-results/gsonTest,build/test-results/jacksonTest,build/test-results/jsonSimpleTest'
    }
}

tasks['sonarqube'].with {
    dependsOn.clear()
    dependsOn jsonSimpleTest
    dependsOn gsonTest
    dependsOn jacksonTest
    dependsOn customJsonTest
}

check.dependsOn jsonSimpleTest
check.dependsOn gsonTest
check.dependsOn jacksonTest
check.dependsOn customJsonTest
check.dependsOn combinedJacocoReport