plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'com.palantir.jacoco-coverage' version '0.4.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'org.owasp.dependencycheck' version '8.1.2'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
group = 'io.github.devatherock'
description = 'java.util.logging.Formatter to log messages as JSON, compatible with Logstash'
version = (System.env.CIRCLE_TAG ? System.env.CIRCLE_TAG.substring(1): '1.3.0') +
        (Boolean.valueOf(System.getProperty("snapshot")) ? "-SNAPSHOT" : "")

repositories {
    mavenCentral()
}

ext {
    jsonSimpleVersion = '1.1.1'
    gsonVersion = '2.10.1'
    jacksonVersion = '2.14.2'
    
    // Properties for publishing
    licenseUrl = 'https://github.com/devatherock/jul-jsonformatter/blob/master/LICENSE.txt'
    scmUrl = 'https://github.com/devatherock/jul-jsonformatter/'
}

configurations {
    // Force dependency versions to use dependencies without vulnerabilities
    all {
        resolutionStrategy {
            force 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
        }
    }
}

dependencies {
    compileOnly group: 'com.googlecode.json-simple', name: 'json-simple', version: jsonSimpleVersion
    compileOnly group: 'com.google.code.gson', name: 'gson', version: gsonVersion
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion

    testCompile group: 'junit', name: 'junit', version: '4.13.2'
}

// Configurations for tests
configurations {
    jsonSimpleTestCompile.extendsFrom testCompile
    jsonSimpleTestCompileOnly.extendsFrom compileOnly
    gsonTestCompile.extendsFrom testCompile
    gsonTestCompileOnly.extendsFrom compileOnly
    jacksonTestCompile.extendsFrom testCompile
    jacksonTestCompileOnly.extendsFrom compileOnly
    customJsonTestCompile.extendsFrom testCompile
    customJsonTestCompileOnly.extendsFrom compileOnly
}

// sourceSets for tests
def allTestFiles = [
    '**/JSONSimpleFormatterTest.java',
    '**/GSONFormatterTest.java',
    '**/JacksonFormatterTest.java',
    '**/CustomJsonConverterTest.java',
    '**/CustomKeysTest.java'
]
def inclusionsBySourceSet = [
    'jsonSimpleTest': [
        '**/JSONSimpleFormatterTest.java'
    ],
    'gsonTest': ['**/GSONFormatterTest.java'],
    'jacksonTest': [
        '**/JacksonFormatterTest.java',
        '**/CustomKeysTest.java'
    ],
    'customJsonTest': [
        '**/CustomJsonConverterTest.java'
    ],
]

sourceSets {
    inclusionsBySourceSet.each { name, inclusions ->
        sourceSets.create(name) {
            java {
                srcDirs = [
                    "$projectDir/src/main/java",
                    "$projectDir/src/test/java"
                ]
                allTestFiles.findAll { !inclusions.contains(it) }.each { testFile ->
                    exclude testFile
                }
            }
            resources.srcDir file('src/test/resources')
        }
    }
}

// Test configuration dependencies
dependencies {
    jsonSimpleTestCompile group: 'com.googlecode.json-simple', name: 'json-simple', version: jsonSimpleVersion
    gsonTestCompile group: 'com.google.code.gson', name: 'gson', version: gsonVersion
    jacksonTestCompile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
}

/** Test tasks **/
def testDescriptions = [
    'json-simple',
    'gson',
    'jackson',
    'custom JSON'
]
def testSourceSetNames = [
    'jsonSimpleTest',
    'gsonTest',
    'jacksonTest',
    'customJsonTest'
]

for(int index = 0; index < testSourceSetNames.size(); index++) {
    tasks.create(name: testSourceSetNames[index], type: Test) {
        description = "Test ${testDescriptions}"
        testClassesDirs = project.sourceSets[testSourceSetNames.get(index)].output.classesDirs
        classpath = project.sourceSets[testSourceSetNames.get(index)].runtimeClasspath
    }
}

apply from: 'https://raw.githubusercontent.com/devatherock/gradle-includes/master/publish.gradle'
apply from: 'checks.gradle'